// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  category    String
  price       Decimal @db.Money
  description String?

  images        ProductImage[]
  comboProducts ComboProducts[]

  @@map("product")
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  @@map("product_image")
}

model Customer {
  id   Int     @id @default(autoincrement())
  name String
  cpf  String? @unique @db.VarChar(11)

  order Order[]

  @@map("customer")
}

model Order {
  id            Int      @id @default(autoincrement())
  status        String   @default("Recebido")
  paymentStatus String   @map("payment_status")
  createdAt     DateTime @default(now()) @map("created_at")

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?      @map("customer_id")

  combo Combo[]

  @@map("order")
}

model Combo {
  id Int @id @default(autoincrement())

  order         Order?          @relation(fields: [orderId], references: [id])
  orderId       Int?            @map("order_id")
  comboProducts ComboProducts[]

  @@map("combo")
}

model ComboProducts {
  createdAt DateTime @default(now()) @map("created_at")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  combo     Combo   @relation(fields: [comboId], references: [id])
  comboId   Int     @map("combo_id")

  @@id([productId, comboId])
  @@map("combo_products")
}
